Campus Course & Records Manager (CCRM)

Java Status Version License

🚀 A comprehensive console-based Java application for academic management

Author: Mahima Pathariya

GitHub stars GitHub forks

🌟 Project Overview
"Revolutionizing academic management with the power of Java"

The Campus Course & Records Manager (CCRM) is a feature-rich console application that transforms how educational institutions handle their core academic operations. Built with modern Java practices and design patterns, this system provides a seamless experience for managing students, courses, and academic records.

✨ Key Features
🧑‍🎓 Student Management

Create, update, and manage student profiles

Track enrollment status and academic progress

Generate comprehensive student transcripts

📚 Course Management

Maintain complete course catalog

Advanced search and filtering capabilities

Instructor assignment and management

📝 Enrollment System

Smart enrollment with business rule validation

Credit limit enforcement

Semester-wise course management

📊 Grading & Analytics

Automated GPA calculations

Letter grade assignments

Performance analytics and reports

💾 File Operations

CSV import/export functionality

Automated backup system

Data archiving with timestamps

🖥️ User Interface

Intuitive menu-driven console

Enhanced user experience

Error handling and validation

🏗️ Architecture

Clean package structure

Design pattern implementations

SOLID principles adherence

🚀 Quick Start Guide
📋 Prerequisites
🔧 System Requirements

🎯 Running the Application
🎮 Method 1: Command Line (Recommended)
🎯 Method 2: Eclipse IDE
📦 Method 3: JAR Execution

🔍 Enable Debug Mode

🐛 Run with assertions enabled (Development Mode)
java -ea -cp src edu.ccrm.cli.MainApp


⏰ Evolution of Java
📈 Click to explore Java's journey through time

🏗️ Java Platforms: Choose Your Adventure

🏷️ Feature	📱 Java ME	🖥️ Java SE	🏢 Java EE
🎯 Target	Mobile & IoT devices	Desktop applications	Enterprise web apps
📦 Size	🪶 Ultra lightweight	⚖️ Balanced	🦣 Feature-heavy
🛠️ APIs	⚡ Essential only	📚 Complete core APIs	🏢 Enterprise features
🎮 Examples	Mobile games, sensors	CCRM, desktop tools	Banking systems, e-commerce
💻 JVM	KVM (limited)	Full JVM	Server-optimized JVM
✅ Our Choice	❌ Too restrictive	🎯 Perfect match!	❌ Unnecessary complexity

🏛️ Java Architecture: The Foundation

🔗 Component Relationships

🔧 JDK (Development Kit)
🎯 Purpose: Complete development environment
📦 Includes: JRE + development tools
👥 For: Java developers
🛠️ Tools: javac, javadoc, jar, jdb

▶️ JRE (Runtime Environment)
🎯 Purpose: Execute Java applications
📦 Includes: JVM + standard libraries
👥 For: End users
📚 Libraries: Collections, I/O, Networking

⚙️ JVM (Virtual Machine)
🎯 Purpose: Platform abstraction layer
📦 Includes: Execution engine + memory
🌐 Benefit: "Write once, run anywhere"
🧠 Features: Garbage collection, optimization

🪟 Windows Java Installation Guide
📥 Step 1: Download JDK
⚙️ Step 2: Installation Process
🌐 Step 3: Configure Environment Variables
✅ Step 4: Verify Installation

🌙 Eclipse IDE Setup Guide
📥 Step 1: Download & Install Eclipse
📂 Step 2: Create New Java Project
📦 Step 3: Import Project Structure
⚙️ Step 4: Configure Run Settings

📸 Screenshot Locations:

Eclipse setup: /screenshots/eclipse-project-setup.png

Run configuration: /screenshots/eclipse-run-config.png

🗺️ Technical Implementation Roadmap
🏗️ Click to explore the complete technical mapping

🎮 Interactive Demo Flow
🚀 Experience CCRM in Action

🎯 Sample Interactive Session
🎪 Click to see the complete demo flow

🗂️ Project Architecture
📦 Package Structure Breakdown
🏗️ Detailed Package Organization

🛡️ Exception Handling Strategy

🚨 Custom Exception Categories

🏷️ Exception Type	📊 Category	📝 Use Case & Example
🔄 DuplicateEnrollmentException	✅ Checked	🎓 When student attempts to enroll in same course twice → throw new DuplicateEnrollmentException("STU001", "CS101")
📊 MaxCreditLimitExceededException	✅ Checked	⚖️ When enrollment would exceed semester credit limit → throw new MaxCreditLimitExceededException(18, 15)
🔍 StudentNotFoundException	❌ Unchecked	👤 When student lookup fails with suggestions → throw new StudentNotFoundException("STU999")
📚 CourseNotFoundException	❌ Unchecked	📖 When course lookup fails with alternatives → throw new CourseNotFoundException("CS999")

🎨 Design Patterns Showcase

🔐 Singleton Pattern - AppConfig

🏗️ Builder Pattern - Course Builder

💾 File Operations & Backup System
📂 Backup Directory Structure
🗂️ Explore the backup organization

🔄 Recursive Backup Size Calculation

public static long calculateDirectorySize(Path directory) throws IOException {
    return Files.walk(directory)
                .filter(Files::isRegularFile)
                .mapToLong(path -> {
                    try {
                        return Files.size(path);
                    } catch (IOException e) {
                        return 0L;
                    }
                })
                .sum();
}


✅ Assertions & Validation System
🔍 Understanding Assertions in CCRM
⚙️ Enabling Assertions
🔧 Assertion Configuration Commands

📊 Sample Data & Test Cases
📄 Sample CSV Data Files

📸 Screenshots Gallery
🖼️ Visual Demonstration

🔧 Installation & Setup
📸 java-version-verification.png
📸 eclipse-workspace-setup.png
📸 project-import-success.png

🚀 Application in Action
📸 main-menu-interface.png
📸 student-management-demo.png
📸 course-enrollment-flow.png

📊 Data Management
📸 transcript-generation.png
📸 csv-export-process.png
📸 backup-directory-structure.png

📈 Reports & Analytics
📸 gpa-analytics-report.png
📸 course-popularity-stats.png
📸 semester-overview.png

🎬 Demo Video Experience
🎥 CCRM Demo Video

📹 Demo Highlights (5 minutes)

🚀 Application startup and configuration

👥 Student registration and management

📚 Course catalog and enrollment process

📊 Grade recording and transcript generation

💾 Data export and backup demonstration

📈 Analytics and reporting features

📋 Platform Summary
🎯 Why Java SE is Perfect for CCRM

🖥️ Java SE = ✅ Perfect Match
... (unchanged text about ME, SE, EE platforms) ...

🏆 Project Achievements
🎯 Technical Excellence Scorecard
... (unchanged table with 100% complete scores) ...

🌟 Overall Project Score: 100% 🌟

🙏 Acknowledgments
📚 Resources and References

👩‍💻 About the Developer
🎓 Mahima Pathariya
📧 Contact: mahima.24mip10103@vitbhopal.ac.in

🎓 Institution: VIT University, Bhopal
📅 Project Date: September 2025

🤝 Connect & Collaborate
GitHub LinkedIn Email

📜 Academic Integrity Statement
This project represents original work developed independently with appropriate citations for referenced materials. All code implementations, design decisions, and documentation reflect personal understanding and application of Java programming concepts.

🏆 Course: Programming in Java
✅ Compliance: Academic integrity maintained
📚 Citations: All references properly attributed
